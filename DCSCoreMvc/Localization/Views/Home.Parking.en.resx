<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Parking" xml:space="preserve">
    <value>&lt;h1&gt;Parking in Ostend&lt;/h1&gt;
&lt;div class="col-md-8 map"&gt;
    &lt;div class="mapouter"&gt;
        &lt;div class="responsive-map"&gt;
            &lt;iframe id="gmap_canvas" src="https://maps.google.com/maps?q=davina's%20coiffure%20shop&amp;t=&amp;z=17&amp;ie=UTF8&amp;iwloc=&amp;output=embed"&gt;&lt;/iframe&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="col-md-4"&gt;
    &lt;h3&gt;Davina's Coiffure Shop&lt;/h3&gt;
    &lt;p&gt;
        Wittenonnenstraat 34&lt;br /&gt;
        8400 Ostend
    &lt;/p&gt;
    &lt;h4&gt;GPS coordinates:&lt;/h4&gt;
    &lt;ul&gt;
        &lt;li&gt;
            Latitude: N 51° 13’47.066” (51.22974055)
        &lt;/li&gt;
        &lt;li&gt;
            Longitude: O 2° 55’ 6.4222” (2.91845067)
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div class="col-xs-12"&gt;
    &lt;p&gt;Our salon is located at the heart of Ostend on the corner of Wittenonnenstraat and Christinastraat.&lt;/p&gt;
    &lt;p&gt;
        Because the salon is located in a pedestrian zone cars are not allowed. However, both the corner of Wittenonnenstraat with Lijnbaanstraat or the corner of Wittenonnenstraat with Aartshertoginnestraat can be reached by car and are only 10 meters away.
        If you wish to park the car in the neighborhood, there are numerous options. Tourism Ostend has made a nice overview (see link below). Those who want to minimize their ecological footprint will experience little inconvenience on foot or by bicycle.
    &lt;/p&gt;
&lt;/div&gt;
&lt;div class="col-xs-12"&gt;
    &lt;h3 class="text-center"&gt;Where can I park my car?&lt;/h3&gt;
    &lt;div class="text-center"&gt;&lt;p&gt;&lt;img class="img-responsive logo_oostende" src="/images/HomeParking/oostende_logo.png" /&gt;&lt;/p&gt;&lt;/div&gt;
    &lt;div class="text-center"&gt;&lt;p&gt;&lt;a class="btn btn-default navbar-btn" target="_blank" href="https://www.visitoostende.be/en/where-can-i-park-ostend-0"&gt;Click here&lt;/a&gt; for the full overview of parking options in Ostend.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Parking in Ostend</value>
  </data>
</root>