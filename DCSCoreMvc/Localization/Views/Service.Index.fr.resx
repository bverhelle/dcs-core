<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BeardTrim" xml:space="preserve">
    <value>Garniture de barbe</value>
  </data>
  <data name="Beautybath" xml:space="preserve">
    <value>Bain de beauté</value>
  </data>
  <data name="BrushingOrRollerWrap" xml:space="preserve">
    <value>Brushing ou mise en plis</value>
  </data>
  <data name="Children" xml:space="preserve">
    <value>Enfants</value>
  </data>
  <data name="ClipperCut" xml:space="preserve">
    <value>Coupe à la tondeuse</value>
  </data>
  <data name="Coloring" xml:space="preserve">
    <value>Colorer</value>
  </data>
  <data name="CurlingIron" xml:space="preserve">
    <value>Fer à boucler</value>
  </data>
  <data name="Cut" xml:space="preserve">
    <value>Coupe</value>
  </data>
  <data name="ExtraColorElumen" xml:space="preserve">
    <value>Couleur supplémentaire Elumen (10g)</value>
  </data>
  <data name="ExtraColorKeune" xml:space="preserve">
    <value>Couleur supplémentaire Goldwell (30g)</value>
  </data>
  <data name="Finishing" xml:space="preserve">
    <value>finition</value>
  </data>
  <data name="FoilHighlights" xml:space="preserve">
    <value>Mèches</value>
  </data>
  <data name="Gentlemen" xml:space="preserve">
    <value>Messieurs</value>
  </data>
  <data name="Haircut" xml:space="preserve">
    <value>Coupe de cheveux</value>
  </data>
  <data name="HaircutBaby" xml:space="preserve">
    <value>Coupe de cheveux bébé</value>
  </data>
  <data name="HaircutBoys" xml:space="preserve">
    <value>Coupe de cheveux garçon</value>
  </data>
  <data name="HaircutGirls" xml:space="preserve">
    <value>Coupe de cheveux fille</value>
  </data>
  <data name="Highlights" xml:space="preserve">
    <value>Balayage</value>
  </data>
  <data name="IntensiveCareMask" xml:space="preserve">
    <value>Masque de soin intensif</value>
  </data>
  <data name="IntroText" xml:space="preserve">
    <value>Vous trouverez ci-dessous une liste de prix de nos services de base.</value>
  </data>
  <data name="IntroText2" xml:space="preserve">
    <value>Nous n'avons pas pu inclure tous les services. N'hésitez pas à nous contacter si vous avez d'autres questions.</value>
  </data>
  <data name="Ladies" xml:space="preserve">
    <value>Dames</value>
  </data>
  <data name="BrushingLong" xml:space="preserve">
    <value>Brushing long</value>
  </data>
  <data name="BrushingMedium" xml:space="preserve">
    <value>Brushing mi-long</value>
  </data>
  <data name="Perm" xml:space="preserve">
    <value>Permanente</value>
  </data>
  <data name="PrePigmenting" xml:space="preserve">
    <value>Pré-pigmentation</value>
  </data>
  <data name="QuickDry" xml:space="preserve">
    <value>Séchage rapide</value>
  </data>
  <data name="Regrowthcolor" xml:space="preserve">
    <value>Coloration racines</value>
  </data>
  <data name="SeperateHighlights" xml:space="preserve">
    <value>Mèches séparées (par pièce)</value>
  </data>
  <data name="BrushingShort" xml:space="preserve">
    <value>Brushing court</value>
  </data>
  <data name="StartingFrom" xml:space="preserve">
    <value>à partir de</value>
  </data>
  <data name="Straighten" xml:space="preserve">
    <value>Defrisage</value>
  </data>
  <data name="StraighteningIronSteampod" xml:space="preserve">
    <value>Fer à lisser/Steampod</value>
  </data>
  <data name="StraightenOrCurl" xml:space="preserve">
    <value>Défriser/boucler</value>
  </data>
  <data name="Supplements" xml:space="preserve">
    <value>Suppléments</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Nos services</value>
  </data>
  <data name="ToBeCombined" xml:space="preserve">
    <value>à combiner avec séchage rapide, brushing ou mise en plis</value>
  </data>
  <data name="TouchUp" xml:space="preserve">
    <value>Retouche brushing</value>
  </data>
  <data name="Updo" xml:space="preserve">
    <value>Chignon</value>
  </data>
  <data name="WashAndCare" xml:space="preserve">
    <value>lavage et soignage</value>
  </data>
  <data name="Work" xml:space="preserve">
    <value>minutes de travail</value>
  </data>
  <data name="YoungerThan10" xml:space="preserve">
    <value>moins de 10 ans</value>
  </data>
  <data name="YoungerThan5" xml:space="preserve">
    <value>moins de 5 ans</value>
  </data>
  <data name="Age10to14" xml:space="preserve">
    <value>de 10 ans à 14 ans</value>
  </data>
  <data name="HaircutGirls10to14" xml:space="preserve">
    <value>Coupe de cheveux fille + séchage rapide</value>
  </data>
  <data name="RollerWrap" xml:space="preserve">
    <value>Mise en plis</value>
  </data>
  <data name="UpdoChildren" xml:space="preserve">
    <value>Chignon enfants</value>
  </data>
  <data name="UpdoLong" xml:space="preserve">
    <value>Chignon long</value>
  </data>
  <data name="UpdoShort" xml:space="preserve">
    <value>Chignon court</value>
  </data>
  <data name="Bondpro" xml:space="preserve">
    <value>Bond pro</value>
  </data>
</root>