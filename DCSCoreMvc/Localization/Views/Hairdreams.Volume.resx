<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Highlines" xml:space="preserve">
    <value>Highlines</value>
  </data>
  <data name="HighlinesIntroText" xml:space="preserve">
    <value>De Hairdreams Highlines geeft volume aan dun en schaars haar in het bovenste deel van het hoofd door aan eigen haar van de cliënte een onzichtbare, speciale net te plaatsen, waarin hoogwaardige echte haren worden ingevlochten.</value>
  </data>
  <data name="HighlinesIntroText2" xml:space="preserve">
    <value>Indien gewenst kan een andere kleur van extra strengen gekozen worden om een aantrekkelijke kleur effect te creëren</value>
  </data>
  <data name="HighlinesTitle" xml:space="preserve">
    <value>Hairdreams Volume+ HighLines</value>
  </data>
  <data name="IntroText" xml:space="preserve">
    <value>De Volume+ methode van haarverdikking geeft meteen volume aan dun en schaars haar. De Volume+ methode  omvat verschillende methoden van haarverdikking en biedt de optimale oplossing voor elk individueel geval - van normaal en dun haar  tot schaars haar.</value>
  </data>
  <data name="IntroText2" xml:space="preserve">
    <value>Dankzij Hairdreams, zelfs in het geval van geavanceerde haaruitval, kunnen de mensen die worstelen met het probleem van plaatselijke kaalheid van dik haar genieten. Eigen haar wordt ingevuld en verdikt met een hoogwaardig echt haar dat aan handmatige selectie werd onderwerpen. Dit haar wordt afgestemd op cliënte’s eigen haar in termen van kleur, lengte en structuur om volledig natuurlijke uitzicht te creëren. Het verbindingsproces verloopt op een wijze die zacht en onschadelijk is voor het haar. De klant voelt geen enkel verschil tussen haar eigen haar en toegevoegde haarstrengen en hoeft geen significante veranderingen in haar leefwijze in te voeren. Het extra volume is niet te onderscheiden van natuurlijk haar van de cliënte.</value>
  </data>
  <data name="Microlines" xml:space="preserve">
    <value>Microlines</value>
  </data>
  <data name="MicrolinesIntroText" xml:space="preserve">
    <value>MicroLines methode is ideaal geschikt om op natuurlijke wijze haar op de hoofd te verdikken, zelfs bij geavanceerde haaruitval.</value>
  </data>
  <data name="MicrolinesIntroText2" xml:space="preserve">
    <value>MicroLines is een net gemaakt met vrijwel onzichtbare, speciale, zeer dunne garen, waarop hoogwaardig echt haar bevestigd zijn. Ze worden aan haar van de klant toegepast in termen van kleur, lengte en structuur, dus ze worden op een onzichtbare manier gemengd met cliente’s haar. Het resultaat is een volledig natuurlijk kapsel, die van natuurlijk haar kan niet worden onderscheiden</value>
  </data>
  <data name="MicrolinesTitle" xml:space="preserve">
    <value>Hairdreams Volume+ MicroLines</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Hairdreams haarverdikkingen</value>
  </data>
  <data name="TitleText" xml:space="preserve">
    <value>Hairdreams Volume+ Haarverdikking</value>
  </data>
  <data name="Tophair" xml:space="preserve">
    <value>Tophair</value>
  </data>
  <data name="TophairIntroText" xml:space="preserve">
    <value>De innovatieve TopHair methode van Hairdreams is snel, comfortabel en flexibel, en ideaal om snel en probleemlos dun en schaars haar op de bovenste gedeelte van het hoofd op te vullen. Door het speciale ontwerp, het is perfect om lang haar te verkrijgen en kapsels met een scheiding.</value>
  </data>
  <data name="TophairIntroText2" xml:space="preserve">
    <value>Het wordt gemaakt uit een moderne, ademende net met ingevlochten strengen van Hairdreams, die worden bevestigd aan haar van de klant in de bovenste gedeelte van het hoofd. Andere strengen worden onzichbaar verbonden met eigen haar, waardoor de zachte en natuurlijke kapsels ontstaan met langere haren, evenals scheidingen en een pony.</value>
  </data>
  <data name="TophairTitle" xml:space="preserve">
    <value>Hairdreams Volume+ Top Hair</value>
  </data>
</root>