<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Highlines" xml:space="preserve">
    <value>Highlines</value>
  </data>
  <data name="HighlinesIntroText" xml:space="preserve">
    <value>The Hairdreams HighLines gives very fine and slightly thinning hair significantly more volume in the crown area. This is done with micro-fine, invisible special threads with high-grade real hair attached to them, which are integrated into the client’s own hair.</value>
  </data>
  <data name="HighlinesIntroText2" xml:space="preserve">
    <value>If desired, then a different color can be chosen for the additional strands in order to get attractive color effects such as highlight or lowlights.</value>
  </data>
  <data name="HighlinesTitle" xml:space="preserve">
    <value>Hairdreams HighLines</value>
  </data>
  <data name="IntroText" xml:space="preserve">
    <value>Hairdreams Hair Thickening provides more volume for fine and thinning hair at the drop of a hat. The Hairdreams MICROLINES System includes various hair thickening methods and provides optimal solutions for any individual case, ranging from normal/fine hair all the way to thinning hair.</value>
  </data>
  <data name="IntroText2" xml:space="preserve">
    <value>Even cases with serious hair loss and bald spots can receive perfect hair volume with Hairdreams. The client’s own hair is supplemented and filled in with high-grade, hand-selected 100% real human hair. This hair matches the client’s hair in terms of color, lengths and structure, creating an absolutely natural-looking result. The integration process is gentle and non-damaging. The additional hair feels like the client’s own hair and can be worn without any noteworthy lifestyle limitations. The additional hair volume is indistinguishable from the client’s natural hair.</value>
  </data>
  <data name="Microlines" xml:space="preserve">
    <value>Microlines</value>
  </data>
  <data name="MicrolinesIntroText" xml:space="preserve">
    <value>The MicroLines method is ideally suited to give people with thin hair in the crown area their natural hair fullness back, even with advanced hair loss.</value>
  </data>
  <data name="MicrolinesIntroText2" xml:space="preserve">
    <value>Micro-fine, virtually invisible special threads, the so-called “MicroLines”, with high-grade real hair attached to them, are worked into the client’s existing hair. The added hair matches the client’s hair in terms of color, structure and length, and thus invisibly integrates into the client’s hair. The result is an absolutely natural real head of hair, which looks just like the client’s own.</value>
  </data>
  <data name="MicrolinesTitle" xml:space="preserve">
    <value>Hairdreams MicroLines</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Hairdreams volume creation</value>
  </data>
  <data name="TitleText" xml:space="preserve">
    <value>Hairdreams MicroLines System</value>
  </data>
  <data name="Tophair" xml:space="preserve">
    <value>Tophair</value>
  </data>
  <data name="TophairIntroText" xml:space="preserve">
    <value>The innovative TopHair System by Hairdreams is especially fast, convenient and flexible in its application, and is ideally suited for quick and effortless thickening of fine and thin hair in the crown area. Due to its special construction it works especially well for styles with longer hair on top, or if the client desires a parting.</value>
  </data>
  <data name="TophairIntroText2" xml:space="preserve">
    <value>It is made of an innovative, breathable high-tech mesh with Hairdreams hair attached to it, which is integrated into the client’s own hair at the crown. The additional hair inconspicuously blends with the client’s hair and results in wonderfully soft and natural hair styles with longer hair, as well as partings and bangs.</value>
  </data>
  <data name="TophairTitle" xml:space="preserve">
    <value>Hairdreams Top Hair</value>
  </data>
</root>